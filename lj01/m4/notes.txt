Team 9+1 (Jeffrey Huang, Johnathan Lee, and Kelly Huang)
SoftDev
LJ01: Le Voyage de Learnination avec Mongo, Deuxi√®me Phase
2020-11-12
-------------------------------------------------------------------
QUERY OPERATORS: COMPARISON

Provide additional ways to locate data within the database
"$" proceeding operator

{ <field>: { <operator> : <value> }}
> $eq  = equal to
> $neq = not equal to
> $gt  = greater than
> $lt  = less than
> $gte = greater than or equal to
> $lte = less than or equal to

ex: { "tripduration": { "$lte" : 70}}
*$eq is the default operator when an operator is not specified

-------------------------------------------------------------------
QUERY OPERATORS: LOGIC

{ <operator> : [{statement1}, {statement2},...]}
> $and = returns document matching all query clauses
> $or  = returns document if at least one clause is matched
> $nor = returns document if failed to match both clauses

{ $not: {statement}} *NO QUOTATIONS
> $not = returns all documents that don't match the query

*$and is the default operator when an operator is not specified

ex: db.zips.find({ "pop": { "$gt": 5000, "$lt": 1000000 }}).count()

-------------------------------------------------------------------
QUERY OPERATORS: EXPRESSIVE

$expr allows the use of aggregation expression within the query language
{ $expr: { <expression> } }
$expr allows us to use variables and conditional statements

$ denotes the use of an operator
$ also addresses the field value
ex: db.trips.find({ $expr: {"$eq": ["$start station id","$end station id"]}})

-------------------------------------------------------------------
QUERY OPERATORS: ARRAYS

{ <array_field>: {"$all": []}} shows all documents with all elements listed in the array, order does not matter

{ <array_field>: {"$size": <number>}} shows all documents with exactly 20 elements in he array

-------------------------------------------------------------------
ARRAY OPERATORS AND PROJECTION

Projection: 2nd part of find() command
Only include the specified fields in the result

> db.<collection>.find({ <query> }, { <field1>: 1, <field2>: 1 })
1 - include the field
0 - exclude the field
*can only use one or the other
*{"_id": 0} is an exception to the rule above

{"array": {"$elemMatch": {"element": {condition}}}}
*shows the element of the array that matches the condition

-------------------------------------------------------------------
ARRAY OPERATORS AND SUBDOCUMENTS

Dot notation is used to go beyond the surface fields in a documents
> db.<collection>.find({"field1.field2.field3": "value"})
